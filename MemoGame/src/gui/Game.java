/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import core.Memo;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.DecimalFormat;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.MatteBorder;

/**
 *
 * @author Nicolas Devenet <nicolas@devenet.info>
 */
public class Game extends javax.swing.JFrame {

    /**
     * Creates new form Game
     */
    public Game() {
        initComponents();
        this.setIconImage(new ImageIcon(ClassLoader.getSystemResource("res/icon.png")).getImage());
        /* init toolbar info */
        this.countGames = 0;
        this.countGames = 0;
        this.timer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                time++;
                updateTimeInfo();
            }
        });
        this.ToolBarInfo.setBorder(new CompoundBorder(
                new MatteBorder(1, 0, 0, 0, Game.DARK_BLUE),
                new EmptyBorder(10, 5, 5, 5)));
        this.ToolBarInfo.setName("Game board");
        this.ToolBarInfo.setFloatable(false);
        /* let's play */
        this.createGame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ToolBarInfo = new javax.swing.JToolBar();
        GameCountsLabel = new javax.swing.JLabel();
        GamesCountLabelLegend = new javax.swing.JLabel();
        ToolBarInfoSeparator1 = new javax.swing.JToolBar.Separator();
        CounterLabel = new javax.swing.JLabel();
        ToolBarInfoSeparator2 = new javax.swing.JToolBar.Separator();
        LevelLabel = new javax.swing.JLabel();
        ToolBarInfoSeparator3 = new javax.swing.JToolBar.Separator();
        HitLabel = new javax.swing.JLabel();
        HitLabelLegend = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        BestScoreLabelLegend1 = new javax.swing.JLabel();
        BestScoreLabel = new javax.swing.JLabel();
        BestScoreLabelLegend2 = new javax.swing.JLabel();
        MainMenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        MenuQuit = new javax.swing.JMenuItem();
        GameMenu = new javax.swing.JMenu();
        MenuSelectLevel = new javax.swing.JMenuItem();
        MenuNewGame = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Memory Game");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName("GameBoard"); // NOI18N

        GameCountsLabel.setText("x");
        ToolBarInfo.add(GameCountsLabel);

        GamesCountLabelLegend.setText("  completed");
        ToolBarInfo.add(GamesCountLabelLegend);

        ToolBarInfoSeparator1.setForeground(Game.DARK_BLUE);
        ToolBarInfoSeparator1.setSeparatorSize(new java.awt.Dimension(20, 0));
        ToolBarInfo.add(ToolBarInfoSeparator1);

        CounterLabel.setText("00:00");
        ToolBarInfo.add(CounterLabel);

        ToolBarInfoSeparator2.setForeground(Game.DARK_BLUE);
        ToolBarInfoSeparator2.setSeparatorSize(new java.awt.Dimension(20, 0));
        ToolBarInfo.add(ToolBarInfoSeparator2);

        LevelLabel.setText("level");
        ToolBarInfo.add(LevelLabel);

        ToolBarInfoSeparator3.setForeground(Game.DARK_BLUE);
        ToolBarInfoSeparator3.setSeparatorSize(new java.awt.Dimension(20, 0));
        ToolBarInfo.add(ToolBarInfoSeparator3);

        HitLabel.setText("x");
        ToolBarInfo.add(HitLabel);

        HitLabelLegend.setText(" hit");
        ToolBarInfo.add(HitLabelLegend);
        ToolBarInfo.add(filler1);

        BestScoreLabelLegend1.setForeground(new java.awt.Color(102, 102, 102));
        BestScoreLabelLegend1.setText("Best: ");
        ToolBarInfo.add(BestScoreLabelLegend1);

        BestScoreLabel.setForeground(new java.awt.Color(102, 102, 102));
        BestScoreLabel.setText("0");
        ToolBarInfo.add(BestScoreLabel);

        BestScoreLabelLegend2.setForeground(new java.awt.Color(102, 102, 102));
        BestScoreLabelLegend2.setText(" hits");
        ToolBarInfo.add(BestScoreLabelLegend2);

        FileMenu.setText("File");

        MenuQuit.setText("Quit");
        MenuQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuQuitActionPerformed(evt);
            }
        });
        FileMenu.add(MenuQuit);

        MainMenuBar.add(FileMenu);

        GameMenu.setText("Game");

        MenuSelectLevel.setText("Select level");
        MenuSelectLevel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSelectLevelActionPerformed(evt);
            }
        });
        GameMenu.add(MenuSelectLevel);

        MenuNewGame.setText("New game");
        MenuNewGame.setActionCommand("NewGame");
        MenuNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuNewGameActionPerformed(evt);
            }
        });
        GameMenu.add(MenuNewGame);

        MainMenuBar.add(GameMenu);

        setJMenuBar(MainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ToolBarInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(304, Short.MAX_VALUE)
                .addComponent(ToolBarInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MenuQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuQuitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_MenuQuitActionPerformed

    private void MenuNewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuNewGameActionPerformed
        // TODO add your handling code here:
        this.createGame();
    }//GEN-LAST:event_MenuNewGameActionPerformed

    private void MenuSelectLevelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSelectLevelActionPerformed
        // TODO add your handling code here:
        Memo.LEVEL lvl = getAskedLevel();
        if (lvl != null) {
            this.level = lvl;
            this.createGame();
        }
    }//GEN-LAST:event_MenuSelectLevelActionPerformed

    private Memo.LEVEL getAskedLevel() {
        return (Memo.LEVEL) JOptionPane.showInputDialog(null,
                "Please select your level:",
                "Memory Game",
                JOptionPane.QUESTION_MESSAGE,
                null,
                Memo.LEVEL.values(),
                this.level);
    }

    private void createGame() {
        // check if level is correct
        if (!Memo.isLevel(this.level)) {
            JOptionPane.showMessageDialog(null,
                    "Oups, the given level is unrecognized. Please try to start a new game.",
                    "Error!",
                    JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Game.class.getName()).log(Level.SEVERE, "Level " + this.level + " not recognized!");
        } else {
            this.time = 0;
            this.hit = 0;
            this.updateTimeInfo();
            this.updateGameInfo();
            this.updateHitInfo();

            this.game = new Memo(this.level, this);
            JPanel containerPanel = new JPanel(new BorderLayout(10, 15));
            JPanel panel = new JPanel(new GridLayout(this.game.rows(), this.game.cols(), 10, 10));
            for (Card c : this.game.cards()) {
                panel.add(c);
                //Logger.getLogger(Game.class.getName()).log(Level.INFO, "Added " + c);
            }
            containerPanel.add(this.ToolBarInfo, BorderLayout.PAGE_END);
            containerPanel.add(panel, BorderLayout.CENTER);
            containerPanel.setBorder(new EmptyBorder(10, 10, 10, 10));

            this.setContentPane(containerPanel);
            this.setResizable(false);
            this.pack();
            this.setLocationRelativeTo(null);
            this.timer.start();

            Logger.getLogger(Game.class.getName()).log(Level.INFO, "Initialization done for new game");
        }
    }

    public void gameIsEnded() {
        this.timer.stop();
        this.countGames++;
        this.updateGameInfo();
        if (this.bestHint > this.hit || this.bestHint == 0) {
            this.bestHint = this.hit;
            this.BestScoreLabel.setText(Integer.toString(this.bestHint));
        }
        long minute = TimeUnit.SECONDS.toMinutes(this.time);
        long second = TimeUnit.SECONDS.toSeconds(this.time) - (TimeUnit.SECONDS.toMinutes(this.time) * 60);
        String duration = (minute > 0 ? Long.toString(minute) + " minute" + (minute > 1 ? "s" : "") + " and " : "")
                + (second > 0 ? Long.toString(second) + " second" + (second > 1 ? "s" : "") : "");
        if (minute >= this.timeOut) {
            duration = "a too long time";
        }
        JOptionPane.showMessageDialog(null,
                "Congratulations! \nYou've completed the game in " + duration + " and " + this.hit + " hits.",
                "Win!",
                JOptionPane.INFORMATION_MESSAGE);
        Logger.getLogger(Game.class.getName()).log(Level.INFO, "Game is ended.");
    }

    private void updateGameInfo() {
        this.GameCountsLabel.setText(Integer.toString(this.countGames));
        this.LevelLabel.setText(this.level.toString());
    }

    private void updateTimeInfo() {
        long minute = TimeUnit.SECONDS.toMinutes(this.time);
        long second = TimeUnit.SECONDS.toSeconds(this.time) - (TimeUnit.SECONDS.toMinutes(this.time) * 60);
        if (minute >= this.timeOut) {
            this.CounterLabel.setText("time's up...");
            JOptionPane.showMessageDialog(null,
                    "It seems to be a quite difficult to find all pairs. \nMay be you should change to a lower level?",
                    "Time's up...",
                    JOptionPane.WARNING_MESSAGE);
            this.timer.stop();
        } else {
            this.CounterLabel.setText(format.format(minute) + ":" + format.format(second));
        }
    }

    private void updateHitInfo() {
        this.HitLabel.setText(Integer.toString(this.hit));
        if (this.hit > 1) {
            this.HitLabelLegend.setText(" hits");
        } else {
            this.HitLabelLegend.setText(" hit");
        }
    }

    public void cardHitten() {
        this.hit++;
        updateHitInfo();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Game().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BestScoreLabel;
    private javax.swing.JLabel BestScoreLabelLegend1;
    private javax.swing.JLabel BestScoreLabelLegend2;
    private javax.swing.JLabel CounterLabel;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JLabel GameCountsLabel;
    private javax.swing.JMenu GameMenu;
    private javax.swing.JLabel GamesCountLabelLegend;
    private javax.swing.JLabel HitLabel;
    private javax.swing.JLabel HitLabelLegend;
    private javax.swing.JLabel LevelLabel;
    private javax.swing.JMenuBar MainMenuBar;
    private javax.swing.JMenuItem MenuNewGame;
    private javax.swing.JMenuItem MenuQuit;
    private javax.swing.JMenuItem MenuSelectLevel;
    private javax.swing.JToolBar ToolBarInfo;
    private javax.swing.JToolBar.Separator ToolBarInfoSeparator1;
    private javax.swing.JToolBar.Separator ToolBarInfoSeparator2;
    private javax.swing.JToolBar.Separator ToolBarInfoSeparator3;
    private javax.swing.Box.Filler filler1;
    // End of variables declaration//GEN-END:variables
    private Memo game;
    private Memo.LEVEL level = Memo.LEVEL.Normal;
    private int countGames;
    private int time;
    private int hit;
    private int bestHint;
    private final int timeOut = 15; // in minutes
    private Timer timer;
    public static final Color DARK_BLUE = new Color(0, 89, 178);
    private DecimalFormat format = new DecimalFormat("00");
}
